buildscript {
    repositories {
        maven {
            name "Jitpack"
            url "https://jitpack.io/"
        }
        maven {
            name "Shedaniel Maven"
            url "https://maven.shedaniel.me/"
        }
    }

    dependencies {
        classpath "com.github.PepperCode1:mcp-tiny:1bde92310cd80f0d834403d40219a2a06be431da"
    }
}

plugins {
    id 'fabric-loom' version '0.7-SNAPSHOT'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

// MCP start

import me.shedaniel.mcptiny.MCPTiny;

void setupMcpMappings(Project project, String mappingsVersion) {
    if (project.file(".gradle/mappings/" + mappingsVersion + ".jar").exists()) {
        return;
    }

    if (!project.file(".gradle/mappings").exists()) {
        project.mkdir(project.file(".gradle/mappings"));
    }

    int separator = mappingsVersion.lastIndexOf('-');
    String mcpMcVersion = mappingsVersion.substring(separator + 1);
    String mcpVersion = mappingsVersion.substring(0, separator);

    String tempProperty = System.getProperty("user.dir");
    System.setProperty("user.dir", "${project.projectDir}/.gradle/mappings");
    MCPTiny.main(new String[] { mcpMcVersion, mcpVersion });
    System.setProperty("user.dir", tempProperty);

    project.getAnt().move(file: "${project.projectDir}/.gradle/mappings/output.jar", tofile: "${project.projectDir}/.gradle/mappings/" + mappingsVersion + ".jar");
}

ConfigurableFileCollection getMcpMappings(Project project, String mappingsVersion) {
    return project.files("${project.projectDir}/.gradle/mappings/" + mappingsVersion + ".jar");
}

setupMcpMappings(rootProject, rootProject.mcp_mappings)

// MCP end

boolean dev = System.getenv('RELEASE') == null || System.getenv('RELEASE').equalsIgnoreCase('false');

ext.buildnumber = 0
project.buildnumber = System.getenv('BUILD_NUMBER') != null ? System.getenv('BUILD_NUMBER') : "custom"

version = "${mc_update_version}-${mod_version}" + (dev ? ".${buildnumber}" : '')
group = 'com.jozufozu.flywheel'
archivesBaseName = 'flywheel'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

repositories {
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings getMcpMappings(rootProject, rootProject.mcp_mappings)
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

loom.accessWidener("src/main/resources/flywheel.accesswidener")

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
        if (project.hasProperty('mavendir')) {
            maven { url mavendir }
        }
    }
}

tasks.curseforge.enabled = !dev && project.hasProperty('jozu_curseforge_key')

curseforge {
    if (project.hasProperty('jozu_curseforge_key')) {
        apiKey = project.jozu_curseforge_key
    }

    project {
        id = project.projectId
        changelog = file('changelog.txt')
        releaseType = project.curse_type
        mainArtifact jar
        addArtifact sourcesJar
    }
}
